present = read.table("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/present.txt")
plot(present$year, present$boys / (present$boys + present$girls)
)
plot(present$year, present$boys / (present$boys + present$girls), type = "l")
plot(present$year, present$boys / (present$boys + present$girls), type = "l")
plot(present$year, present$boys - present$girls, type = "l")
(1.96 ^ 2) * (300 ^ 2) / (25 ^ 2)
(30.69-32)/(4.31/6)
4.31/6
1.65*0.718
30.69+1.184
30.69-1.184
13/15
4.65/(sqrt(40))
(9.51-10)/0.7352296
0.09*0.9
0.09*0.1
0.91*0.98
0.91*0.02
0.081+0.0182
0.081/0.0992
5/1.7
1-0.9984
1-0.025
1.28*18/4
5.76*5.76
27/30
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/nc.Rdata"))
names(nc)
summary(nc$gained)
head(nc$gained)
tail(nc$gained)
hist(nc$gained)
boxplot(nc$gained)
sum(nc$gained == NA)
gained_clean = na.omit(nc$gained)
n = length(gained_clean)
boot_means = rep(100, NA)
boot_means = rep(NA, NA)
boot_means = rep(NA, 100)
for (i in 1:100) {
samp = sample(gained_clean, 100, replace = TRUE)
boot_means [i] = mean(samp)
}
hist(boot_means)
for (i in 1:100) {
boot_sample = sample(gained_clean, n, replace = TRUE)
boot_means[i] = mean(boot_sample)
}
hist(boot_means)
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/inference.Rdata"))
boot_method = "perc")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.9, est = "mean" boot_method = "perc")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.9, est = "mean", boot_method = "perc")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.95, est = "mean", boot_method = "perc")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.9, est = "mean", boot_method = "se")
inference(nc$gained, type = "ci", method = "simulation", conflevel = 0.9, est = "median", boot_method = "perc")
inference(nc$fage, type = "ci", method = "simulation", conflevel = 0.95, est = "mean", boot_method = "se")
plot(nc$habit, nc$weight)
by(nc$weight, nc$habit)
length(by(nc$weight, nc$habit))
by(plot(nc$weight, nc$habit))
by(nc$weight, nc$habit, length)
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical")
inference(y = nc$weight, x = nc$habit, est = "mean", type = "ht", null = 0, alternative = "twosided", method = "theoretical", order = c("smoker", "nonsmoker"))
by(nc$mage)
bosplot(nc$mage)
boxplot(nc$mage)
boxplot(nc$mature)
mage
summary(nc$mage)
load(url("http://s3.amazonaws.com/assets.datacamp.com/course/dasi/gss.Rdata"))
plot(nc$habit, nc$weight)
boxplot(gss$class, gss$wordsum)
hist(gss$wordsum)
boxplot(gss$wordsum)
by(gss$wordsum, gss$class, mean)
boxplot(gss$wordsum ~ gss$class)
inference(y = gss$wordsum, x = gss$class, est = "mean", method = "theoretical", type = "ht", alternative = "greater")
install.packages("KernSmooth")
library("KernSmooth", lib.loc="C:/Program Files/R/R-3.0.2/library")
a <- array(rnorm(2 * 2 * 10), c(2, 2, 10))
a
setwd("J:/MyForm/Courses/2014-04-07 R Programming/Programming Assignments/PA2")
source("makeCacheMatrix.R")
z <- c(2, 5, 1, 3)
w <- matrix(z, 2)
w
cacheSolve(w)
makeCacheMatrix(w)
cacheSolve(w)
cacheSolve(z)
makeCacheMatrix(z)
source("original.R")
r <- rnorm(1000)
makeVector(r)
cachemean(r)
cachemean(r)
makeVector(r)
z$set
z$setsolve
z$getsolve
source("makeCacheMatrix.R")
makeCacheMatrix(w)
cachemean(w)
source("makeCacheMatrix.R")
cacheSolve(w)
solve(w)
m <- solve(w)
rr <- makeVector(r)
qq <- cachemean(rr)
qq
qq <- cachemean(rr)
qq
1 + qq
1 + cachemean(rr)
a <- makeCacheMatrix(matrix(1:4,2))
a$get()
a$getInverse()
a$set(matrix(5:8,2))
a$get()
cacheSolve(a)
cacheSolve(a)
a$getInverse()
a$getInverse(a)
a$get() %*% b
b = a$getInverse()
b = a$getInverse(a)
setwd("J:/MyForm/Courses/2014-04-07 R Programming/Programming Assignments/PA2")
cachemean(makeVector(10:0))
source("original.R")
cachemean(makeVector(10:0))
cachemean(makeVector(10:0))
cachemean(makeVector(10:0))
source("makeCacheMatrix.R")
cacheSolve(makeCacheMatrix(matrix(1:4,2)))
a <- makeCacheMatrix(matrix(1:4,2))
cacheSolve(a)
v <- cacheSolve(a)
w <- matrix(1:4, 2)
w %*% v
e <- matrix(c(2, 1, 5, 4, -2, 0, 1, 3, -1), 3)
View(e)
f<-makeCacheMatrix(e)
cacheSolve(f)
t <- cacheSolve(f)
t
t %*% e
source("cachematrix.R")
setwd("C:/Users/usuario/ProgrammingAssignment2")
source("cachematrix.R")
source("cachematrix.R")
e <- matrix(c(2, 1, 5, 4, -2, 0, 1, 3, -1), 3)
f<-makeCacheMatrix(e)
t <- cacheSolve(f)
t %*% e
